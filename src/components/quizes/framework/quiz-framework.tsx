/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/ejwRzEw5Z0k
 */
import { Button } from "@/components/ui/button";
import { PlayNote } from "@/components/tone/play-note";

import { useEffect, useState } from "react";

import { Scoring } from "./scoring";
import { useScoreStore } from "../../../lib/state/score-context";
import { QuizQuestion } from "@/lib/quiz/question";
import { getQuizQuestion } from "@/lib/random";
import { Note } from "tone/Tone/core/type/Units";
import { QuizOptions } from "./quiz-options";
import { ScoreDetails } from "./score-details";
import Link from "next/link";

export interface QuizFrameworkProps {
  headline: string;
  noteMapping: Record<string, Note[]>;
  asChord?: boolean;
}

export function QuizFramework({
  headline,
  noteMapping,
  asChord,
}: QuizFrameworkProps) {
  const [question, setQuestion] = useState<QuizQuestion | undefined>();

  const answeredQuestions = useScoreStore((state) => state.answeredQuestions);
  const resetAll = useScoreStore((store) => store.resetAll);

  const nextQuestion = () => {
    const newQuestion = getQuizQuestion(
      noteMapping,
      answeredQuestions,
      asChord
    );
    setQuestion(newQuestion);
  };

  // Because options are random, set them in useEffect so we don't have hydration error
  useEffect(() => {
    nextQuestion();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [asChord, noteMapping]);

  const correctNotes = question?.correctOption?.notes;
  // If we haven't populated options yet, don't render anything.
  if (!correctNotes) {
    return <></>;
  }
  return (
    <main className="w-full max-w-2xl mx-auto flex flex-col items-center gap-6 py-8 px-4">
      <div className="w-full flex flex-col items-center gap-4">
        <h2 className="text-2xl font-semibold text-gray-900 dark:text-gray-100">
          {headline}
        </h2>
        <PlayNote quizOption={question.correctOption} />
      </div>
      <QuizOptions question={question} nextQuestion={nextQuestion} />
      <Scoring noteMapping={noteMapping} />
      <ScoreDetails />
      <Button
        asChild
        variant="outline"
        onClick={() => {
          resetAll();
        }}
      >
        <Link href={"/"}>End Session</Link>
      </Button>
    </main>
  );
}
